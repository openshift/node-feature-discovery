// Code generated by mockery v1.0.0. DO NOT EDIT.

// Re-generate by running 'make mock'

package apihelper

import kubernetes "k8s.io/client-go/kubernetes"
import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/api/core/v1"

// MockAPIHelpers is an autogenerated mock type for the APIHelpers type
type MockAPIHelpers struct {
	mock.Mock
}

// GetClient provides a mock function with given fields:
func (_m *MockAPIHelpers) GetClient() (*kubernetes.Clientset, error) {
	ret := _m.Called()

	var r0 *kubernetes.Clientset
	if rf, ok := ret.Get(0).(func() *kubernetes.Clientset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kubernetes.Clientset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: _a0, _a1
func (_m *MockAPIHelpers) GetNode(_a0 *kubernetes.Clientset, _a1 string) (*v1.Node, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1.Node
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, string) *v1.Node); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Node)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kubernetes.Clientset, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNode provides a mock function with given fields: _a0, _a1
func (_m *MockAPIHelpers) UpdateNode(_a0 *kubernetes.Clientset, _a1 *v1.Node) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*kubernetes.Clientset, *v1.Node) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
